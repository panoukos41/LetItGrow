@using LetItGrow.Microservice.Data.Nodes.Models
@using LetItGrow.Microservice.Data.Nodes.Requests
@using LetItGrow.Microservice.Data.Nodes.Validators
@using static LetItGrow.UI.FormHelpers.NodeFormHelper

@inject INodeService nodeService

<EditForm EditContext="EditContext" class="form">
    <FluentValidator Validator="validator" />

    <fieldset>
        <legend>Measurement Node</legend>

        <div class="form-group">
            <label>Name</label>
            <InputText @bind-Value="Data.Name" />
            <ValidationMessage class="block text-red-400" For="() => Data.Name" />
        </div>

        <div class="form-group">
            <label>Description</label>
            <InputTextArea @bind-Value="Data.Description" />
            <ValidationMessage For="() => Data.Description" />
        </div>
    </fieldset>

    <fieldset>
        <legend>Settings</legend>

        <div class="form-group">
            <label>PollInterval</label>
            <InputNumber @bind-Value="Data.Settings.PollInterval" />
            <ValidationMessage class="block text-red-400" For="() => Data.Settings.PollInterval" />
        </div>
    </fieldset>

    <div class="form-group flex justify-end space-x-2">
        <SpinnerButton Type="ButtonType.submit" Class="btn h-10 w-20" Command="Send">Update</SpinnerButton>
        <button type="button" class="btn-cancel h-10 w-20" @onclick="OnCancelClick">Cancel</button>
    </div>
</EditForm>

@code{
    protected EditContext EditContext = new(new());
    protected MeasurementNodeModel Node = null!;
    protected UpdateMeasurementNode Data = new();
    protected UpdateMeasurementNodeValidator validator = new();
    protected ReactiveCommand<Unit, Unit> Send;

    [Parameter]
    public EventCallback<MouseEventArgs> OnCancelClick { get; set; }

    public UpdateMeNodeForm()
    {
        Send = ReactiveCommand.CreateFromTask(async () =>
        {
            if (!EditContext.Validate() || !ShouldSentRequest(Data, Node)) return;

            await Task.Delay(500);
            await nodeService
                .Update(GenerateRequest(Data, Node))
                .MatchAsync(HandleResult, HandleError);
        });
    }

    public void SetNode(MeasurementNodeModel node)
    {
        Node = node;
        Data = GenerateForm(Node);
        EditContext = new(Data);
    }

    protected void HandleResult(NodeModelUpdate result)
    {

    }

    protected void HandleError(Error error)
    {
        Console.WriteLine(error);
    }
}