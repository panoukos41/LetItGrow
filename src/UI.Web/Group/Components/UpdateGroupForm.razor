@using System.Reactive.Subjects
@inject IGroupService groupService

<EditForm EditContext="form">
    <FluentValidationValidator Validator="form.Validator" />

    <fieldset>
        <legend>Update Group</legend>

        @if (messages is not null)
        {
            <p><u><b>@messages</b></u></p>
        }

        <div>
            <label>Name</label>
            <InputText @bind-Value="form.Request.Name" />
            <ValidationMessage class="block text-red-400" For="() => form.Request.Name" />
        </div>

        <div>
            <label>Description</label>
            <InputTextArea @bind-Value="form.Request.Description" />
            <ValidationMessage For="() => form.Request.Description" />
        </div>

        <div>
            <label>Type</label>
            <InputSelect @bind-Value="form.Request.Type">
                @foreach (var type in Enum.GetValues(typeof(GroupType)))
                {
                    <option value="@type">@type</option>
                }
            </InputSelect>
            <ValidationMessage class="w-full" For="() => form.Request.Type" />
        </div>
    </fieldset>

    <div class="flex justify-end space-x-2">
        <SpinnerButton Class="btn text-gray-100" Command="form.Command">Update</SpinnerButton>
        <button type="button" class="btn-cancel text-gray-100" @onclick="OnCancelClick">Cancel</button>
    </div>
</EditForm>

@code{
    private FormContext<UpdateGroup, UpdateGroupValidator, Result<ModelUpdate>> form;
    private GroupModel group = null!;
    private string? messages;

    [Parameter]
    public EventCallback<MouseEventArgs> OnCancelClick { get; set; }

    [Parameter]
    public GroupModel Group
    {
        get => group;
        set => SetGroup(value);
    }


    public UpdateGroupForm()
    {
        form = new(Execute, Result, ShouldSentRequest);
    }
    
    public void SetGroup(GroupModel group)
    {
        this.group = group;
        messages = null;
        form.Reset(GenerateForm());

        StateHasChanged();
    }

    private Task<Result<ModelUpdate>> Execute(UpdateGroup request) =>
        groupService.Update(GenerateRequest());

    private void Result(Result<ModelUpdate> r) => r.Switch(
        result =>
        {
            messages = "Group updated!";
            StateHasChanged();
        },
        error =>
        {
            messages = error.Title;
            Console.WriteLine(error);
        });


    private UpdateGroup GenerateForm() => new()
    {
        Id = Group.Id,
        Type = Group.Type,
        ConcurrencyStamp = Group.ConcurrencyStamp,
        Name = Group.Name,
        Description = Group.Description,
    };

    private bool ShouldSentRequest()
    {
        var form = this.form.Request;
        var group = Group;

        var send =
            form.Name is { Length: > 0 } &&
            form.Name != group.Name ||
            form.Type != group.Type ||
            form.Description != group.Description;


        messages = send ? null : "Change something to send!";
        return send;
    }

    private UpdateGroup GenerateRequest()
    {
        var form = this.form.Request;
        var group = Group;

        var request = new UpdateGroup(group);
        if (form.Name != group.Name)
        {
            request.Name = form.Name;
        }
        if (form.Type != group.Type)
        {
            request.Type = form.Type;
        }
        if (form.Description != group.Description)
        {
            request.Description = form.Description;
        }
        return request;
    }
}