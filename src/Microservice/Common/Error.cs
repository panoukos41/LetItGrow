using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;

namespace LetItGrow.Microservice.Common
{
    /// <summary>
    /// A record describing an error. Two records are considered equal
    /// when they have the same <see cref="Title"/> and <see cref="Status"/> other members are ignored.
    /// </summary>
    public record Error
    {
        /// <summary>
        /// Initialize a new <see cref="Error"/> record.
        /// </summary>
        /// <param name="title">A title that describes the error.</param>
        /// <param name="detail">A description of the error.</param>
        /// <param name="status">An HTTP status code([RFC7231], Section 6) that describes the error.</param>
        /// <param name="metadata">Metadata to include with the error.</param>
        public Error(string title, int status, string detail, IDictionary<string, string>? metadata = null)
        {
            Title = title;
            Status = status;
            Detail = detail;
            Metadata = metadata ?? new Dictionary<string, string>();
        }

        /// <summary>
        /// Initialize a new <see cref="Error"/> record.
        /// </summary>
        /// <param name="title">A title that describes the error.</param>
        /// <param name="detail">A description of the error.</param>
        /// <param name="status">An HTTP status code([RFC7231], Section 6) that describes the error.</param>
        /// <param name="metadata">Metadata to include with the error.</param>
        [JsonConstructor]
        public Error(string title, int status, string detail, Dictionary<string, string> metadata)
            : this(title, status, detail, metadata as IDictionary<string, string>)
        {
        }

        /// <summary>
        /// The name (code) of the error.
        /// </summary>
        [JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// The HTTP status code([RFC7231], Section 6) generated by the origin server for
        /// this occurrence of the problem.
        /// </summary>
        [JsonPropertyName("status")]
        public int Status { get; set; }

        /// <summary>
        /// The message that describes the error.
        /// </summary>
        [JsonPropertyName("detail")]
        public string Detail { get; set; }

        /// <summary>
        /// An object to include extra data for the client.
        /// This is not a required field.
        /// </summary>
        [JsonPropertyName("metadata")]
        public IDictionary<string, string> Metadata { get; set; }

        #region Ovverides

        // More details for how to ovveride methods of a record at:
        // https://docs.microsoft.com/en-us/dotnet/csharp/tutorials/exploration/records#prerequisites

        /// <inheritdoc/>
        protected virtual bool PrintMembers(StringBuilder b)
        {
            b.Append($"Title = {Title}, ");
            b.Append($"Status = {Status}, ");
            b.Append($"Detail = {Detail}, ");
            if (Metadata.Count == 0)
            {
                b.Append("Metadata = {}");
            }
            else
            {
                b.Append("Metadata = { ");
                // b.AppendJoin(", ", Metadata.Select(x => $"{x.Key}: {x.Value}"));
                // use this since append join doesn't exist.
                b.Append(string.Join(", ", Metadata.Select(x => $"{x.Key}: {x.Value}")));
                b.Append(" }");
            }
            return true;
        }

        /// <inheritdoc/>
        public virtual bool Equals(Error? other)
        {
            return other is not null &&
                Title == other.Title &&
                Status == other.Status;
        }

        /// <inheritdoc/>
        public override int GetHashCode()
        {
            return HashCode.Combine(Title, Status);
        }

        #endregion
    }
}